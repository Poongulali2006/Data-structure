#include <stdio.h>
#include <stdlib.h>


typedef struct Node {
    int data;            
    struct Node* left;  
    struct Node* right;  
} Node;


    Node* newNode = (Node*)malloc(sizeof(Node)); 
    newNode->data = data;  
    newNode->left = NULL;  
    newNode->right = NULL; 
    return newNode;
}


int findDepth(Node* root, int target, int depth) {
    if (root == NULL) {
        return -1; 
    }
    if (root->data == target) {
        return depth; 
    }

    
    int leftDepth = findDepth(root->left, target, depth + 1);
    if (leftDepth != -1) {
        return leftDepth; 
    }

    // Recur to the right subtree
    return findDepth(root->right, target, depth + 1);
}

void freeTree(Node* root) {
    if (root != NULL) {
        freeTree(root->left);
        freeTree(root->right);
        free(root);
    }
}

int main() {
    Node* root = NULL;

    
    root = createNode(50);
    root->left = createNode(30);
    root->right = createNode(70);
    root->left->left = createNode(20);
    root->left->right = createNode(40);
    root->right->left = createNode(60);
    root->right->right = createNode(80);

    
    int target = 40;
    int depth = findDepth(root, target, 0);

    if (depth != -1) {
        printf("Depth of node with value %d: %d\n", target, depth);
    } else {
        printf("Node with value %d not found in the tree.\n", target);
    }

    
    freeTree(root);

    return 0;
}
