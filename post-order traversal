#include <stdio.h>
#include <stdlib.h>
typedef struct Node {
    int data;           
    struct Node* left;   
    struct Node* right;  
} Node;
Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node)); 
    newNode->data = data; 
    newNode->left = NULL;  
    newNode->right = NULL; 
    return newNode;
}

Node* insertNode(Node* root, int data) {
    if (root == NULL) {
        return createNode(data);
    }
    if (data < root->data) {
        
        root->left = insertNode(root->left, data);
    } else if (data > root->data) {
        root->right = insertNode(root->right, data);
    }

    
    return root;
}
void postOrderTraversal(Node* root) {
    if (root != NULL) {
        postOrderTraversal(root->left);   
        postOrderTraversal(root->right);  
        printf("%d ", root->data);      
    }
}
void freeTree(Node* root) {
    if (root != NULL) {
        freeTree(root->left);   
        freeTree(root->right);  
        free(root);             
    }
}

int main() {
    
    Node* root = NULL;
    root = insertNode(root, 50);
    insertNode(root, 30);
    insertNode(root, 70);
    insertNode(root, 20);
    insertNode(root, 40);
    insertNode(root, 60);
    insertNode(root, 80);
    printf("Post-order Traversal of the BST: ");
    postOrderTraversal(root);
    printf("\n");

    // Free allocated memory
    freeTree(root);

    return 0;
}
